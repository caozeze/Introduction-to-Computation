-- Informatics 1 Functional Programming
-- December 2018
-- SITTING 1 (09:30 - 11:30)

import Test.QuickCheck
import Control.Monad
import Data.Char

-- Question 1

-- 1a

f :: String -> Int
f = undefined

-- 1b

g :: String -> Int
g = undefined

-- Question 2

-- 2a

p :: [(Int,Int)] -> Bool
p = undefined

-- 2b

q :: [(Int,Int)] -> Bool
q = undefined

-- 2c

r :: [(Int,Int)] -> Bool
r = undefined

-- Question 3

data Tree a = Lf a | Tree a :+: Tree a
  deriving (Eq, Show)

instance Arbitrary a => Arbitrary (Tree a) where
  arbitrary = sized gen
    where
    gen 0 = liftM Lf arbitrary
    gen n | n>0 =
      oneof [liftM Lf arbitrary,
             liftM2 (:+:) tree tree]
      where
      tree = gen (n `div` 2)

-- 3a

right :: Tree a -> Bool
right = undefined

-- 3b

leaves :: Tree a -> [a]
leaves = undefined

-- 3c

shift :: Tree a -> Tree a
shift = undefined
